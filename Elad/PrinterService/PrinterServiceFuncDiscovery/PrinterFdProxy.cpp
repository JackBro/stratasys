////////////////////////////////////////////////////////////////////////////////
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// Copyright (c) Microsoft Corporation. All rights reserved.
////////////////////////////////////////////////////////////////////////////////

// Public Headers
#include <windows.h>
#include <wsdapi.h>
#include <stdio.h>
#include <strsafe.h>

// Sample Headers
#include "PrinterServiceType.h"
#include "PrinterServiceTypeProxy.h"
#include "PrinterFdProxy.h"

//------------------------------------------------------------------------------
// CreateCPrinterServiceWsdProxy
//      This is essentially the factory method for the CPrinterServiceWsdProxy
//      class. It takes a property store that's expected to have come from
//      an FD Function Instance.
//------------------------------------------------------------------------------
STDMETHODIMP CreateCPrinterServiceWsdProxy(
	IPropertyStore* pPropertyStore,
	IPrinterService** ppPrinterService
	)
{
	HRESULT                     hr = S_OK;
	PROPVARIANT                 pv = { 0 };
	WCHAR                       szProxyAddress[MAX_PATH] = { 0 };
	UUID                        uuid = { 0 };
	CPrinterServiceTypeProxy* pCPrinterServiceTypeProxy = NULL;
	CPrinterServiceWsdProxy*  pCPrinterServiceWsdProxy = NULL;

	if (NULL == pPropertyStore ||
		NULL == ppPrinterService)
	{
		return E_INVALIDARG;
	}

	wprintf(L"GetValue of PKEY_PNPX_GlobalIdentity (device host id)...");
	hr = pPropertyStore->GetValue(PKEY_PNPX_GlobalIdentity, &pv);
	wprintf(L"0x%x\n", hr);

	if (S_OK == hr)
	{
		wprintf(L"Device Host ID: %s\n", pv.pwszVal);
	}

	//
	// Create a unique proxy ID to use when connecting to the thermostat device
	//
	if (S_OK == hr)
	{
		hr = UuidCreate(&uuid);
		if (S_OK == hr)
		{
			hr = StringCbPrintfW(
				szProxyAddress, sizeof(szProxyAddress),
				L"urn:uuid:%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x",
				uuid.Data1, uuid.Data2, uuid.Data3,
				uuid.Data4[0], uuid.Data4[1], uuid.Data4[2], uuid.Data4[3],
				uuid.Data4[4], uuid.Data4[5], uuid.Data4[6], uuid.Data4[7]);
		}
	}

	//
	// Create the proxy object that implements IPrinterServiceType.
	// The object being created here is what CPrinterServiceWsdProxy
	// wraps to expose the real IPrinterService interface.
	// This function being called here was generated by WSD Code Gen.
	//
	if (S_OK == hr)
	{
		wprintf(L"Calling CreateCPrinterServiceTypeProxy...");
		hr = CreateCPrinterServiceTypeProxy(
			pv.pwszVal,
			szProxyAddress,
			&pCPrinterServiceTypeProxy,
			NULL
			);
		wprintf(L"0x%x\n", hr);
	}

	//
	// Now create the CPrinterServiceWsdProxy object and hand it
	// the CPrinterServiceTypeProxy object.
	//
	if (S_OK == hr)
	{
		wprintf(L"Creating the CPrinterServiceWsdProxy object...");
		pCPrinterServiceWsdProxy = new CPrinterServiceWsdProxy(
			pCPrinterServiceTypeProxy
			);
		if (NULL == pCPrinterServiceWsdProxy)
		{
			hr = E_OUTOFMEMORY;
		}
		wprintf(L"0x%x\n", hr);
	}

	if (S_OK == hr)
	{
		*ppPrinterService = static_cast<IPrinterService*>(pCPrinterServiceWsdProxy);
	}

	//
	// Cleanup
	//
	PropVariantClear(&pv);

	if (NULL != pCPrinterServiceTypeProxy)
	{
		pCPrinterServiceTypeProxy->Release();
		pCPrinterServiceTypeProxy = NULL;
	}

	return hr;
}// CreateCPrinterServiceWsdProxy


//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::CPrinterServiceWsdProxy (Constructor)
//------------------------------------------------------------------------------
CPrinterServiceWsdProxy::CPrinterServiceWsdProxy(
	IPrinterServiceType* pPrinterServiceType
	) :
	m_cRef(1)
{
	pPrinterServiceType->AddRef();
	m_pPrinterServiceType = pPrinterServiceType;
}


//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::~CPrinterServiceWsdProxy (Destructor)
//------------------------------------------------------------------------------
CPrinterServiceWsdProxy::~CPrinterServiceWsdProxy()
{
	if (NULL != m_pPrinterServiceType)
	{
		m_pPrinterServiceType->Release();
		m_pPrinterServiceType = NULL;
	}
}


//
// IPrinterService
//

//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::SendDocument
//------------------------------------------------------------------------------
HRESULT CPrinterServiceWsdProxy::SendDocument(
	LONG body, LONG* jobId
	)
{
	return S_OK;//m_pPrinterServiceType->SendDocument(NULL, NULL);
}// CPrinterServiceWsdProxy::SendDocument


//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::CancelJob
//------------------------------------------------------------------------------
HRESULT CPrinterServiceWsdProxy::CancelJob(
	LONG jobId
	)
{
	return E_FAIL;//m_pPrinterServiceType->CancelJob(NULL, NULL);
}// CPrinterServiceWsdProxy::CancelJob


//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::GetPrinterElements
//------------------------------------------------------------------------------
HRESULT CPrinterServiceWsdProxy::GetPrinterElements(
	INT opcode, WCHAR** bodyOut
	)
{
	//ELAD: Demo for a valid WSD printer request
	GET_PRINTER_ELEMENTS_REQUEST_TYPE request;
	GET_PRINTER_ELEMENTS_RESPONSE_TYPE* response = NULL;
	request.RequestedElements = new REQUESTED_PRINTER_ELEMENTS_TYPE();
	request.RequestedElements->Name = new WSDXML_NAME_LIST();
	request.RequestedElements->Name->Element = &Names_Print[239]; //i.e. WSDXML_NAME is like { &Namespace_Print, L"JobName" }
	request.RequestedElements->Name->Next = NULL;
	return m_pPrinterServiceType->GetPrinterElements(&request, &response);
}// CPrinterServiceWsdProxy::GetPrinterElements


//
// IUnknown
//

//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::QueryInterface
//------------------------------------------------------------------------------
HRESULT CPrinterServiceWsdProxy::QueryInterface(
	REFIID riid,
	void** ppvObject
	)
{
	HRESULT hr = S_OK;

	if (NULL == ppvObject)
	{
		return E_INVALIDARG;
	}

	*ppvObject = NULL;

	if (__uuidof(IPrinterService) == riid)
	{
		*ppvObject = static_cast<IPrinterService*>(this);
		AddRef();
	}
	else if (__uuidof(IUnknown) == riid)
	{
		*ppvObject = static_cast<IUnknown*>(this);
		AddRef();
	}
	else
	{
		hr = E_NOINTERFACE;
	}

	return hr;
}// CPrinterServiceWsdProxy::QueryInterface


//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::AddRef
//------------------------------------------------------------------------------
ULONG CPrinterServiceWsdProxy::AddRef()
{
	return InterlockedIncrement(&m_cRef);
}// CPrinterServiceWsdProxy::AddRef


//------------------------------------------------------------------------------
// CPrinterServiceWsdProxy::Release
//------------------------------------------------------------------------------
ULONG CPrinterServiceWsdProxy::Release()
{
	LONG lRef = InterlockedDecrement(&m_cRef);

	if (0 == lRef)
	{
		delete this;
	}
	return lRef;
}// CPrinterServiceWsdProxy::Release
